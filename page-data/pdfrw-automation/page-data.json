{"componentChunkName":"component---src-templates-post-tsx","path":"/pdfrw-automation/","result":{"data":{"markdownRemark":{"html":"<p>PDF 폼을 채우는 업무를 받았습니다. 대략 600 rows 쯤 되는 데이터를 분류해서 PDF에 채워 넣는 업무였습니다. <br>\n당연히 손으로 일일히 채우기는 불편하기 때문에 Python을 사용해서 자동화를 해보았습니다.</p>\n<p>구글링을 해보니 이미 PDF를 다룰 수 있는 다양한 패키지들을 배포하고 있었습니다. 그 중 <code class=\"language-text\">pdfrw</code>를 사용해서 만들어보았습니다.</p>\n<h1 id=\"install\" style=\"position:relative;\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install</h1>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pdfrw   <span class=\"token comment\"># Install with pip</span>\nconda <span class=\"token function\">install</span> -c conda-forge pdfrw  <span class=\"token comment\"># or with conda</span></code></pre></div>\n<h1 id=\"codes\" style=\"position:relative;\"><a href=\"#codes\" aria-label=\"codes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codes</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># pdf.py</span>\n<span class=\"token keyword\">import</span> pdfrw\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fill_pdf</span><span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">,</span> output_pdf_path<span class=\"token punctuation\">,</span> data_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\ttemplate_pdf <span class=\"token operator\">=</span> pdfrw<span class=\"token punctuation\">.</span>PdfReader<span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">)</span>\n\n\tannotations <span class=\"token operator\">=</span> template_pdf<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'/Annots'</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> annotation <span class=\"token keyword\">in</span> annotations<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/Subtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/Widget'</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tkey <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> data_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\tannotation<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>pdfrw<span class=\"token punctuation\">.</span>PdfDict<span class=\"token punctuation\">(</span>AP<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data_dict<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tpdfrw<span class=\"token punctuation\">.</span>PdfWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_pdf_path<span class=\"token punctuation\">,</span> template_pdf<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fill_pdfs</span><span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">,</span> output_pdf_path<span class=\"token punctuation\">,</span> data_dict_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data_dict_list<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">'Error: Argument `data_dict_list` must be list.'</span><span class=\"token punctuation\">)</span>\n\n\ttemplate_pdf <span class=\"token operator\">=</span> pdfrw<span class=\"token punctuation\">.</span>PdfReader<span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> page <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>template_pdf<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tannotations <span class=\"token operator\">=</span> template_pdf<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'/Annots'</span><span class=\"token punctuation\">]</span>\n\n\t\t<span class=\"token keyword\">for</span> annotation <span class=\"token keyword\">in</span> annotations<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/Subtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/Widget'</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\tkey <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n\t\t\t\t\t<span class=\"token keyword\">if</span> key <span class=\"token keyword\">in</span> data_dict_list<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t\tannotation<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>pdfrw<span class=\"token punctuation\">.</span>PdfDict<span class=\"token punctuation\">(</span>AP<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>data_dict_list<span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tpdfrw<span class=\"token punctuation\">.</span>PdfWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_pdf_path<span class=\"token punctuation\">,</span> template_pdf<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">merge_pdf</span><span class=\"token punctuation\">(</span>pdf_path_list<span class=\"token punctuation\">,</span> output_pdf_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\twriter <span class=\"token operator\">=</span> pdfrw<span class=\"token punctuation\">.</span>PdfWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">for</span> pdf_path <span class=\"token keyword\">in</span> pdf_path_list<span class=\"token punctuation\">:</span>\n\t\tpdf <span class=\"token operator\">=</span> pdfrw<span class=\"token punctuation\">.</span>PdfReader<span class=\"token punctuation\">(</span>pdf_path<span class=\"token punctuation\">)</span>\n\t\twriter<span class=\"token punctuation\">.</span>addpages<span class=\"token punctuation\">(</span>pdf<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">)</span>\n\n\twriter<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_pdf_path<span class=\"token punctuation\">)</span></code></pre></div>\n<p>PDF의 Field의 이름을 key, 채울 내용을 value로 하는 dictionary를 <code class=\"language-text\">raw_data</code>로 받아서 폼을 완성합니다.\n<code class=\"language-text\">fill_pdf</code>에서 페이지 내에 있는 모든 annotation을 순회하면서 key가 존재하면, value를 넣고 update합니다.</p>\n<p><code class=\"language-text\">fill_pdfs</code>는 여러 페이지의 PDF문서를 채워 넣을 때 사용합니다. <code class=\"language-text\">raw_data_list</code>는 <code class=\"language-text\">raw_data</code>들의 배열로, 배열의 인덱스가 페이지의 인덱스에 대응됩니다.</p>\n<p>그리고 저는 1장짜리 템플릿 PDF문서와 같은 포맷으로 데이터를 채워야했기 때문에, <code class=\"language-text\">merge_pdf</code>로 템플릿 PDF문서끼리 여러 번 merge하여 복사했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n<span class=\"token keyword\">from</span> pdf <span class=\"token keyword\">import</span> fill_pdf<span class=\"token punctuation\">,</span> fill_pdfs<span class=\"token punctuation\">,</span> merge_pdf\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> ceil\n\nRAW_DATA <span class=\"token operator\">=</span> <span class=\"token string\">'data.json'</span>\n\nPDF_TEMPLATE_PATH <span class=\"token operator\">=</span> <span class=\"token string\">'template.pdf'</span>\nPDF_OUTPUT_PATH <span class=\"token operator\">=</span> <span class=\"token string\">'output.pdf'</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>RAW_DATA<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span>\n    raw_data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>json_file<span class=\"token punctuation\">)</span>\n\n\nmax_page <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>ceil<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 page당 5 rows</span>\n\ntemplate_path_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>PDF_TEMPLATE_PATH <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>max_page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nmerge_pdf<span class=\"token punctuation\">(</span>template_path_list<span class=\"token punctuation\">,</span> <span class=\"token string\">'temp.pdf'</span><span class=\"token punctuation\">)</span>\n\n\ndata_dict_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ndata_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> data_row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>raw_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> data_row<span class=\"token punctuation\">:</span>\n        data_dict<span class=\"token punctuation\">[</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data_row<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> idx <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>appointment_sorted<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        data_dict_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>data_dict<span class=\"token punctuation\">)</span>\n\n\nfill_pdfs<span class=\"token punctuation\">(</span><span class=\"token string\">'temp.pdf'</span><span class=\"token punctuation\">,</span> PDF_OUTPUT_PATH<span class=\"token punctuation\">,</span> data_dict_list<span class=\"token punctuation\">)</span></code></pre></div>\n<p>정의한 함수들을 사용해서 완성한 코드입니다. JSON파일에서 raw data를 읽어와서 1페이지 당 5 rows 씩 나눠서 입력을 했습니다. <br>\n제 경우에는 Field 이름이 <code class=\"language-text\">name-index</code>꼴이라 <code class=\"language-text\">f&#39;{key}-{(idx+1) % 5}&#39;</code>로 지정했습니다. 상황에 맞게 for문을 고치면 될 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># naming.py</span>\n<span class=\"token keyword\">import</span> pdfrw\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fill_name_pdf</span><span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">,</span> output_pdf_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    template_pdf <span class=\"token operator\">=</span> pdfrw<span class=\"token punctuation\">.</span>PdfReader<span class=\"token punctuation\">(</span>input_pdf_path<span class=\"token punctuation\">)</span>\n\n\tannotations <span class=\"token operator\">=</span> template_pdf<span class=\"token punctuation\">.</span>pages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'/Annots'</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">for</span> annotation <span class=\"token keyword\">in</span> annotations<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/Subtype'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/Widget'</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\tkey <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">[</span><span class=\"token string\">'/T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n                <span class=\"token comment\"># Update every fields.</span>\n\t\t\t\tannotation<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>pdfrw<span class=\"token punctuation\">.</span>PdfDict<span class=\"token punctuation\">(</span>AP<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\tpdfrw<span class=\"token punctuation\">.</span>PdfWriter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>output_pdf_path<span class=\"token punctuation\">,</span> template_pdf<span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 PDF의 Field의 이름을 모른다면 위와 같은 코드로 확인해볼 수 있습니다.\n폼의 내용으로 해당하는 Field의 이름을 채웁니다.</p>","excerpt":"PDF 폼을 채우는 업무를 받았습니다. 대략 600 rows 쯤 되는 데이터를 분류해서 PDF에 채워 넣는 업무였습니다. \n당연히 손으로 일일히 채우기는 불편하기 때문에 Python을 사용해서 자동화를 해보았습니다. 구글링을 해보니 이미 PDF…","tableOfContents":"<ul>\n<li><a href=\"/pdfrw-automation/#install\">Install</a></li>\n<li><a href=\"/pdfrw-automation/#codes\">Codes</a></li>\n</ul>","fields":{"slug":"/pdfrw-automation/"},"frontmatter":{"title":"pdfrw를 사용한 PDF 업무 자동화","date":"Apr 24, 2020","tags":["Python","PDF","TaskAutomation"],"keywords":["Python","PDF","TaskAutomation","업무자동화"]}}},"pageContext":{"slug":"/pdfrw-automation/","series":[]}}}